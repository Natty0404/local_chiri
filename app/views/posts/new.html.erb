<div class="container ml-2 mt-3">
  <div class="row">
    <div class="col-3 sm-1">
       <div class="follow-btn">
         <%= render 'users/info', user: current_user %>
       </div>
      <%= render 'form', post: @post, spot: @spot %>
    </div>

    <div class="col-8 sm-1">
      <input id="search_address" type="textbox" value="">
      <input id="search_address_button" type="button" value="地図を検索" onclick="codeAddress()">
      <div id="map" style="width: 1200px; height: 700px;"></div>
    </div>
  </div>
</div>

<script>

    let map

    const display = document.getElementById('display')

    // mapの表示関数
    function initMap() {
        geocoder = new google.maps.Geocoder()

        // mapの初期位置, 縮尺を定義
        map = new google.maps.Map(document.getElementById('map'), {
            center: {
                lat: 35.6458437,
                lng: 139.7046171
            },
            zoom: 12,
        });

        // mapsテーブルにあるそれぞれのレコードをmap上に表示
        <% @maps.each do |m| %>
            (function(){
            var contentString = "住所：<%= m.address %>";

            // マーカーを立てる
            var marker = new google.maps.Marker({
                position:{lat: <%= m.latitude %>, lng: <%= m.longitude %>},
                map: map,
                title: contentString
            });

            // 情報ウィンドウ(吹き出し)の定義
            // 投稿の詳細ページへのリンクも
            var infowindow = new google.maps.InfoWindow({
            position: {lat: <%= m.latitude %>, lng: <%= m.longitude %>},
            content: "<a href='<%= map_url(m.id) %>' target='_blank'><%= m.address %></a>"
            });

            // クリックしたときに情報ウィンドウを表示
            marker.addListener('click', function() {
            infowindow.open(map, marker);
            });

            })();
        <% end %>
    }

    let geocoder

    // 地図検索関数
    function codeAddress() {
        let inputAddress = document.getElementById('address').value;

        geocoder.geocode({
            'address': inputAddress
        }, function (results, status) {
            if (status == 'OK') {
                map.setCenter(results[0].geometry.location);
                var marker = new google.maps.Marker({
                    map: map,
                    position: results[0].geometry.location
                });

            display.textContent = "検索結果：" + results[ 0 ].geometry.location
            } else {
                alert('該当する結果がありませんでした：' + status);
            }
        });
    }


// /*
// mapを関数の外で定義(codeAddressでも使うため)
// geocoderを用意
// */
// function initAutocomplete() {
//   //マップの初期設定です。
//   const map = new google.maps.Map(document.getElementById("map"), {
//     center: { lat: -33.8688, lng: 151.2195 },
//     zoom: 13,
//     mapTypeId: "roadmap",
//   });
//   const input = document.getElementById("pac-input");
//   const searchBox = new google.maps.places.SearchBox(input);
// ////"SearchBoxクラス"はPlacesライブラリのメソッド。引数はinput(ドキュメント上ではinputFieldとある)。
// ////[https://developers.google.com/maps/documentation/javascript/reference/places-widget#SearchBox]

//   map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
//   ////"ControlPosition"クラスはコントローラーの位置を定める。
//   ////https://lab.syncer.jp/Web/API/Google_Maps/JavaScript/ControlPosition/
//   ////https://developers.google.com/maps/documentation/javascript/examples/control-positioning

//   map.addListener("bounds_changed", () => {
//     searchBox.setBounds(map.getBounds());
//   });
//   ////"bound_changed"イベントは(見えてる範囲の地図･ビューポートに変化があったときに発火)
//   ////https://lab.syncer.jp/Web/API/Google_Maps/JavaScript/Map/bounds_changed/
//   ////"getBounds"メソッドはビューポートの境界を取得。Mapクラスのメソッド。
//   ////https://lab.syncer.jp/Web/API/Google_Maps/JavaScript/Map/getBounds/

//   let markers = [];
//   searchBox.addListener("places_changed", () => {
//   ////"place_chaged"イベントはAutoCompleteクラスのイベント.
//   ////https://developers.google.com/maps/documentation/javascript/reference/places-widget#Autocomplete.place_changed

//     const places = searchBox.getPlaces();
//     ////"getPlaces"メソッドはクエリ(検索キーワード)を配列(PlaceResult)で返す。
//     ////https://developers.google.com/maps/documentation/javascript/reference/places-widget#Autocomplete.place_changed

//     if (places.length == 0) {
//       return;
//     }
//     // Clear out the old markers.
//     markers.forEach((marker) => {
//       //"forEach"メソッドは引数にある関数へ、Mapオブジェクトのキー/値を順に代入･関数の実行をする。
//         //Mapオブジェクト:
//           //https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Map
//       marker.setMap(null);
//       ////setMapメソッドはMarker(Polyline,Circleなど)クラスのメソッド。Markerを指定した位置に配置する。引数nullにすると地図から取り除く。
//     });
//     markers = [];
//     // For each place, get the icon, name and location.
//     const bounds = new google.maps.LatLngBounds();
//     ////"LatLngBounds"クラスは境界を作るインスンタンスを作成。引数は左下、右上の座標。
//     ////https://lab.syncer.jp/Web/API/Google_Maps/JavaScript/LatLngBounds/#:~:text=LatLngBounds%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AF%E5%A2%83%E7%95%8C(Bounding,%E4%BD%9C%E3%82%8B%E3%81%93%E3%81%A8%E3%82%82%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82
//     places.forEach((place) => {
//       if (!place.geometry) {
//         ////"geometry"はplaceライブラリのメソッド。

//         console.log("Returned place contains no geometry");
//         return;
//       }
//       const icon = {
//         url: place.icon,
//         ////"icon"はアイコンを表すオブジェクト。マーカーをオリジナル画像にしたいときなど。
//         ////https://lab.syncer.jp/Web/API/Google_Maps/JavaScript/Icon/
//         size: new google.maps.Size(71, 71),
//         origin: new google.maps.Point(0, 0),
//         anchor: new google.maps.Point(17, 34),
//         ////"Point"クラスはマーカーのラベルなどの位置を決めるインスタンスメソッド。
//         ////https://lab.syncer.jp/Web/API/Google_Maps/JavaScript/Point/

//         scaledSize: new google.maps.Size(25, 25),
//       };
//       // Create a marker for each place.
//       markers.push(
//         new google.maps.Marker({
//           map,
//           icon,
//           title: place.name,
//           position: place.geometry.location,
//         })
//       );

//       if (place.geometry.viewport) {
//         ////viewport"メソッド
//         // Only geocodes have viewport.
//         bounds.union(place.geometry.viewport);
//         ////"union"メソッドはLatLngBoundsクラスのメソッド。自身の境界に指定した境界を取り込んで合成する。
//         ////https://lab.syncer.jp/Web/API/Google_Maps/JavaScript/LatLngBounds/union/
//       } else {
//         bounds.extend(place.geometry.location);
//         ////"extend"メソッドはLatLngBoundsクラスのメソッド。自身の境界に新しく位置座標を追加する。
//         ////https://lab.syncer.jp/Web/API/Google_Maps/JavaScript/LatLngBounds/extend/
//       }
//     });
//     map.fitBounds(bounds);
//     ////"fitBounds"メソッドはmapクラスのメソッド。指定した境界を見えやすい位置にビューポートを変更する。
//     ////https://lab.syncer.jp/Web/API/Google_Maps/JavaScript/Map/fitBounds/#:~:text=Map.fitBounds()%E3%81%AFMap,%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%A6%E3%81%8F%E3%82%8C%E3%81%BE%E3%81%99%E3%80%82

//   });
// }

// let map
// let geocoder

// function initMap () {

//   map = new google.maps.Map(document.getElementById('map'), {
//     center: {lat: -34.397, lng: 150.644},
//     zoom: 8
//   });

//   let inputAddress = 'tokyo';
//     // geocoderを初期化
//   geocoder = new google.maps.Geocoder()

//   // geocodingしたあとmapを移動
//   geocoder.geocode( { 'address': inputAddress}, function(results, status) {
//     if (status == 'OK') {
// 　    // map.setCenterで地図が移動
//       map.setCenter(results[0].geometry.location);

//   　  // google.maps.MarkerでGoogleMap上の指定位置にマーカが立つ
//       var marker = new google.maps.Marker({
//           map: map,
//           position: results[0].geometry.location });
//     } else {
//       all
//     }
//   })
// };

// initMap();
</script>